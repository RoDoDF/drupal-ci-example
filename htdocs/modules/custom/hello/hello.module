<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_cron().
 */
function hello_cron() {
  drupal_set_message(t('Hello module cron task done.'), 'warning');
}

/**
 * Implements hook_help().
 */
function hello_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the hello module.
    case 'help.page.hello':
      return '<p>' . t('Hello module\'s help page.') . '</p>';
  }
}

/**
 * Implements hook_user_login().
 */
function hello_user_login(User $account) {
  // Fonction t().
  // Il existe 3 types de jetons indiquant comment on substitue les variables.
  // ! : le contenu de la variable est interprété.
  // @ : le contenu de la variable est échappé.
  // % : le contenu de la variable est échappé et la balise <em> est ajoutée.
  drupal_set_message(t('Welcome dear %name!',
                       array('%name' => $account->getAccountName())
  ));
}

/**
 * Implements hook_theme().
 */
function hello_theme($existing, $type, $theme, $path) {
  return array(
    'hello_node_history' => array(
      'template'  => 'hello-node-history',  // Automatiquement appelé en fonction du nom du hook de thème.
      'variables' => array(
        'node'  => NULL,
        'count' => NULL,
      ),
    ),
  );
}

function hello_node_update(NodeInterface $node) {
  $user = \Drupal::currentUser();
  $database = \Drupal::database();
  // kint($node);

  $database->insert('hello_node_history')
    ->fields(array(
      'nid' => $node->id(),
      'uid' => $user->id(),
      'update_time' => \Drupal::time()->getCurrentTime(),
    ))
    ->execute();
}



/**
 * Implements hook_entity_delete().
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function hello_entity_delete(EntityInterface $entity) {
  // Delete the entity's entries.
  if ($entity->getEntityTypeId() == 'node') {
    $database = \Drupal::database();
    $database->delete('hello_node_history')
      ->condition('nid', $entity->id())
      ->execute();
  }
}

function hello_preprocess_block(array &$variables) {
  $class = \Drupal::config('hello.config')->get('color');
  $variables['attributes']['class'][] = $class;
}

/**
 * Implements hook_form_alter().
 */
function hello_form_alter(array &$form, FormStateInterface &$form_state, $form_id) {
  //drupal_set_message($form_id);
  if ($form_id == 'contact_message_feedback_form') {

    $form['phone_number'] = array(
      '#type'     => 'tel',
      '#title'    => t('Telephone'),
      '#required' => TRUE,
    );

    $form['actions']['submit']['#value'] = t('SEND NOM!');

    $form['name']['#weight']         = 100;
    $form['mail']['#weight']         = 200;
    $form['phone_number']['#weight'] = 300;
    $form['message']['#weight']      = 400;
    $form['actions']['#weight']      = 500;

    unset($form['#process']);

    $form['subject']['#access'] = FALSE;
  }
}

/**
 * Implements hook_mail_alter().
 * @param array $message
 */
function hello_mail_alter(&$message) {
  if ($message['id'] == 'contact_page_mail') {
    $message['body'][] = $message['params']['phone_number'];
  }
}

/**
 * Implements hook_page_attachments().
 * @param array $page
 */
function hello_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'hello/hello';
}
